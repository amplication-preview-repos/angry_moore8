/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductEntry } from "./ProductEntry";
import { ProductEntryCountArgs } from "./ProductEntryCountArgs";
import { ProductEntryFindManyArgs } from "./ProductEntryFindManyArgs";
import { ProductEntryFindUniqueArgs } from "./ProductEntryFindUniqueArgs";
import { CreateProductEntryArgs } from "./CreateProductEntryArgs";
import { UpdateProductEntryArgs } from "./UpdateProductEntryArgs";
import { DeleteProductEntryArgs } from "./DeleteProductEntryArgs";
import { ProductEntryService } from "../productEntry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductEntry)
export class ProductEntryResolverBase {
  constructor(
    protected readonly service: ProductEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "read",
    possession: "any",
  })
  async _productEntriesMeta(
    @graphql.Args() args: ProductEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductEntry])
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "read",
    possession: "any",
  })
  async productEntries(
    @graphql.Args() args: ProductEntryFindManyArgs
  ): Promise<ProductEntry[]> {
    return this.service.productEntries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductEntry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "read",
    possession: "own",
  })
  async productEntry(
    @graphql.Args() args: ProductEntryFindUniqueArgs
  ): Promise<ProductEntry | null> {
    const result = await this.service.productEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductEntry)
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "create",
    possession: "any",
  })
  async createProductEntry(
    @graphql.Args() args: CreateProductEntryArgs
  ): Promise<ProductEntry> {
    return await this.service.createProductEntry({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductEntry)
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "update",
    possession: "any",
  })
  async updateProductEntry(
    @graphql.Args() args: UpdateProductEntryArgs
  ): Promise<ProductEntry | null> {
    try {
      return await this.service.updateProductEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductEntry)
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "delete",
    possession: "any",
  })
  async deleteProductEntry(
    @graphql.Args() args: DeleteProductEntryArgs
  ): Promise<ProductEntry | null> {
    try {
      return await this.service.deleteProductEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
