/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductEntryService } from "../productEntry.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductEntryCreateInput } from "./ProductEntryCreateInput";
import { ProductEntry } from "./ProductEntry";
import { ProductEntryFindManyArgs } from "./ProductEntryFindManyArgs";
import { ProductEntryWhereUniqueInput } from "./ProductEntryWhereUniqueInput";
import { ProductEntryUpdateInput } from "./ProductEntryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductEntryControllerBase {
  constructor(
    protected readonly service: ProductEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductEntry })
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProductEntry(
    @common.Body() data: ProductEntryCreateInput
  ): Promise<ProductEntry> {
    return await this.service.createProductEntry({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTimeOfArrival: true,
        status: true,
        weight: true,
        productId: true,
        productCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductEntry] })
  @ApiNestedQuery(ProductEntryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productEntries(
    @common.Req() request: Request
  ): Promise<ProductEntry[]> {
    const args = plainToClass(ProductEntryFindManyArgs, request.query);
    return this.service.productEntries({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTimeOfArrival: true,
        status: true,
        weight: true,
        productId: true,
        productCode: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productEntry(
    @common.Param() params: ProductEntryWhereUniqueInput
  ): Promise<ProductEntry | null> {
    const result = await this.service.productEntry({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTimeOfArrival: true,
        status: true,
        weight: true,
        productId: true,
        productCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProductEntry(
    @common.Param() params: ProductEntryWhereUniqueInput,
    @common.Body() data: ProductEntryUpdateInput
  ): Promise<ProductEntry | null> {
    try {
      return await this.service.updateProductEntry({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateTimeOfArrival: true,
          status: true,
          weight: true,
          productId: true,
          productCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductEntry",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProductEntry(
    @common.Param() params: ProductEntryWhereUniqueInput
  ): Promise<ProductEntry | null> {
    try {
      return await this.service.deleteProductEntry({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateTimeOfArrival: true,
          status: true,
          weight: true,
          productId: true,
          productCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
